cp -v /boot/config-$(uname -r) .config
make menuconfig 

cat .config | grep 'DEBUG_INFO' 
cat .config | grep 'GDB_SCRIPTS'  => CONFIG_GDB_SCRIPTS=y
cat .config | grep 'DEBUG_KERNEL'

#!/bin/sh

qemu-system-x86_64 \
    -s \
    -m 64M \
    -nographic \
    -kernel "./bzImage" \
    -append "console=ttyS0 quiet loglevel=3 oops=panic panic=-1 pti=on kaslr min_addr=4096" \
    -no-reboot \
    -cpu qemu64,+smep,+smap \
    -monitor /dev/null \
    -initrd "./initramfs.cpio" \
   -smp 2 \
   -smp cores=2 \
   -smp threads=1

# find . | cpio -o -H newc | gzip > root.cpio.gz
# cp /boot/config-$(uname -r) ./.config

#!/bin/sh
qemu-system-x86_64 \
-m 4098M \
-kernel ./bzImage \
-initrd  ./rootfs.img \
-append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet nokaslr" \
-cpu qemu64,+smep,+smap \
-no-reboot \
-s \
-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \
-nographic

Nếu bạn muốn giải nén sang thư mục khác hãy dùng tùy chọn -C, ví dụ như sau:

tar -xvf sampleArchive.tar -C /home/ExtractedFiles/

Lệnh giải nén file .tar.gz cũng tương tự:

tar -xvf sampleArchive.tar.gz
tar -xvf sampleArchive.tar.gz -C /home/ExtractedFiles/


mkinitramfs -o ramdisk.img -> file ramdisk.img

cp /boot/initrd.img .

gcc -static -o helloworld helloworld.c

echo helloworld | cpio -o --format=newc > initrd-hw.img

Sau khi biên dịch thành công kernel thì sẽ xuất hiện /arch/x86/boot/bzImage và /boot/initrd.img
và   -append "console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0 nokaslr" \
root /dev/sda hoặc là /dev/ram

1
###############################################################################################################
sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison
wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.18.10.tar.xz
tar xvf linux-5.18.10.tar.xz
cd linux-5.18.10

make x86_64_defconfig | make menuconfig
make -j$(nproc)
```
#include<stdio.h>

int main(){
	printf("Hello, kernel!\n");
	sleep(9999999999999999999);
}
```
gcc --static hello.c -o init
find . | cpio -o -H newc | gzip > root.cpio.gz

qemu-system-x86_64 -nographic -no-reboot -kernel arch/x86/boot/bzImage -initrd vfs/root.cpio.gz -append "panic=1 console=ttyS0"
------------------------


2
###############################################################################################################
# Create initrd directories
mkdir initrd
cd initrd
mkdir -p etc proc sys

# Create file 'init', make it executeable
```
#!/bin/sh

mount -t proc proc /proc
mount -t sysfs none /sys

# https://busybox.net/FAQ.html#job_control
mknod /dev/ttyS0 c 4 64
setsid sh -c 'exec sh </dev/ttyS0 >/dev/ttyS0 2>&1'
```

# Download, configure & build busybox
git clone https://github.com/mirror/busybox.git
cd busybox
make defconfig | make menuconfig
manually set CONFIG_STATIC=y in busybox/.config
make -j $(nproc)

# Install busybox
make CONFIG_PREFIX=$PWD/BUSYBOX install
then copy /BUSYBOX's content to initrd


# Create virtual filesystem
Navigate to /initrd and run command:
find . | cpio -o -H newc | gzip > root.cpio.gz

# Boot linux(from linux folder)

qemu-system-x86_64 -nographic -no-reboot -kernel arch/x86/boot/bzImage -initrd vfs/root.cpio.gz -append "panic=1 console=ttyS0"


3
#########################################################




